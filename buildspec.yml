# ---------- buildspec.yml ----------
# Builds a Docker image, pushes it to ECR, then rolls the ‚Äúdemo-app‚Äù
# Deployment in an EKS cluster named ‚Äúdemo-cluster‚Äù.
# Tested on CodeBuild image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
# Requires: CodeBuild project *privileged mode* = true.

version: 0.2

env:
  variables:
    # Change only these four if your repo/cluster names differ
    AWS_REGION:   us-east-1
    REPO_NAME:    demo-app          # also the K8s deployment/container name
    CLUSTER_NAME: demo-cluster
  exported-variables:               # needed in later phases
    - IMAGE_URI

phases:
  # ---------- 1. install ----------
  install:
    # ‚ÄúStandard 5.0‚Äù AL2 images ship *docker* binaries but the daemon is off.
    commands:
      - echo "üîß Starting Docker daemon ..."
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock &> /tmp/dockerd.log &
      - timeout 30 sh -c 'until docker info >/dev/null 2>&1; do sleep 2; done'
      - echo "‚úÖ Docker is up"
      # Light-weight kubectl download (latest stable)
      - curl -sLo /usr/local/bin/kubectl \
        https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
      - chmod +x /usr/local/bin/kubectl

  # ---------- 2. pre_build ----------
  pre_build:
    commands:
      - echo "üîë Logging in to Amazon ECR ..."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME
      - aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      # Short commit SHA = deterministic, unique tag
      - IMAGE_TAG=$(echo "$CODEBUILD_RESOLVED_SOURCE_VERSION" | cut -c1-7)
      - export IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      - echo "üè∑Ô∏è  Using image tag $IMAGE_TAG"

  # ---------- 3. build ----------
  build:
    commands:
      - echo "üê≥ Building and pushing $IMAGE_URI ..."
      - docker build --pull --no-cache -t $IMAGE_URI .
      - docker push $IMAGE_URI

  # ---------- 4. post_build ----------
  post_build:
    commands:
      - echo "‚ò∏Ô∏è  Rolling out to EKS ..."
      - aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
      - kubectl set image deployment/$REPO_NAME \
          $REPO_NAME=$IMAGE_URI --record
      - kubectl rollout status deployment/$REPO_NAME
      - echo "‚úÖ Deployment completed"

# No artifacts ‚Äî image is the only output.
artifacts:
  files: []
# ---------- end of buildspec.yml ----------
