# ─────────────────────────  buildspec.yml  ─────────────────────────
# Image:  aws/codebuild/amazonlinux2-x86_64-standard:5.0   (privilegedMode: true)
# Flow :  install Docker daemon ▸ login to ECR ▸ build & push image ▸
#         update “demo-app” Deployment in EKS and wait for rollout
# -------------------------------------------------------------------

version: 0.2

env:
  variables:
    AWS_REGION:   us-east-1
    REPO_NAME:    demo-app          # also the container & Deployment name
    CLUSTER_NAME: demo-cluster
  exported-variables:               # let later phases reuse them
    - IMAGE_URI

phases:
  # 1️⃣  INSTALL – start dockerd & download kubectl
  install:
    commands:
      - echo "🔧  Starting Docker daemon ..."
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock &> /tmp/dockerd.log &
      - timeout 30 sh -c 'until docker info >/dev/null 2>&1; do sleep 2; done'
      - echo "✅  Docker is up"
      - |
        curl -sL "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
          -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl

  # 2️⃣  PRE_BUILD – log in to ECR & set tag/URI
  pre_build:
    commands:
      - echo "🔑  Logging in to Amazon ECR ..."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME
      - aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - IMAGE_TAG=$(echo "$CODEBUILD_RESOLVED_SOURCE_VERSION" | cut -c1-7)
      - export IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      - echo "🏷️  Using image tag $IMAGE_TAG"

  # 3️⃣  BUILD – build & push the container
  build:
    commands:
      - echo "🐳  Building and pushing $IMAGE_URI ..."
      - docker build --pull --no-cache -t $IMAGE_URI .
      - docker push $IMAGE_URI

  # 4️⃣  POST_BUILD – update the Deployment and wait
  post_build:
    commands:
      - echo "☸️  Rolling out to EKS ..."
      - aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
      - kubectl set image deployment/$REPO_NAME \
          $REPO_NAME=$IMAGE_URI --record
      - kubectl rollout status deployment/$REPO_NAME
      - echo "✅  Deployment completed"

# No artifacts needed – the pushed image is the output
artifacts:
  files: []
# ─────────────────────────  end buildspec.yml  ─────────────────────
